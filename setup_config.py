#!/usr/bin/env python3
"""
Configuration setup script for AI-Enhanced Recommendation System
Run this script to set up your AI provider configuration.
"""

import os
import sys
from pathlib import Path


def main():
    print("ü§ñ AI-Enhanced Recommendation System Configuration Setup")
    print("=" * 60)
    
    # Check if config.py already exists
    config_path = Path("config.py")
    if config_path.exists():
        print("‚ö†Ô∏è  config.py already exists!")
        response = input("Do you want to overwrite it? (y/N): ")
        if response.lower() != 'y':
            print("Configuration setup cancelled.")
            return
    
    print("\nSelect your AI provider:")
    print("1. OpenAI (GPT-3.5/GPT-4)")
    print("2. Anthropic (Claude)")
    print("3. Ollama (Local models)")
    print("4. Custom API")
    print("5. Disable AI features (content-based only)")
    
    while True:
        choice = input("\nEnter your choice (1-5): ").strip()
        if choice in ['1', '2', '3', '4', '5']:
            break
        print("Invalid choice. Please enter a number between 1 and 5.")
    
    config_template = """# AI-Enhanced Recommendation System Configuration
# Generated by setup script

from app.ai_models import (
    AIProvider, 
    AIModelConfig, 
    AIProcessingConfig, 
    RecommendationConfig
)

"""
    
    if choice == '1':  # OpenAI
        api_key = input("Enter your OpenAI API key: ").strip()
        model = input("Enter model name (default: gpt-3.5-turbo): ").strip() or "gpt-3.5-turbo"
        
        config_template += f"""
# OpenAI Configuration
AI_MODEL_CONFIG = AIModelConfig(
    provider=AIProvider.OPENAI,
    model_name="{model}",
    api_key="{api_key}",
    temperature=0.7,
    max_tokens=1000,
    timeout=30
)
"""
    
    elif choice == '2':  # Anthropic
        api_key = input("Enter your Anthropic API key: ").strip()
        model = input("Enter model name (default: claude-3-sonnet-20240229): ").strip() or "claude-3-sonnet-20240229"
        
        config_template += f"""
# Anthropic Configuration
AI_MODEL_CONFIG = AIModelConfig(
    provider=AIProvider.ANTHROPIC,
    model_name="{model}",
    api_key="{api_key}",
    temperature=0.7,
    max_tokens=1000,
    timeout=30
)
"""
    
    elif choice == '3':  # Ollama
        endpoint = input("Enter Ollama endpoint (default: http://localhost:11434): ").strip() or "http://localhost:11434"
        model = input("Enter model name (default: llama2): ").strip() or "llama2"
        
        config_template += f"""
# Ollama Configuration
AI_MODEL_CONFIG = AIModelConfig(
    provider=AIProvider.OLLAMA,
    model_name="{model}",
    base_url="{endpoint}",
    temperature=0.7,
    max_tokens=1000,
    timeout=60
)
"""
    
    elif choice == '4':  # Custom API
        endpoint = input("Enter your API endpoint URL: ").strip()
        api_key = input("Enter your API key (or press Enter if not needed): ").strip()
        model = input("Enter model name: ").strip()
        
        config_template += f"""
# Custom API Configuration
AI_MODEL_CONFIG = AIModelConfig(
    provider=AIProvider.CUSTOM,
    model_name="{model}",
    api_key="{api_key}" if "{api_key}" else None,
    base_url="{endpoint}",
    temperature=0.7,
    max_tokens=1000,
    timeout=30
)
"""
    
    else:  # choice == '5' - Disable AI
        config_template += """
# AI Disabled Configuration
AI_MODEL_CONFIG = AIModelConfig(
    provider=AIProvider.OPENAI,  # Not used when disabled
    model_name="",
    api_key="",
    temperature=0.7,
    max_tokens=1000,
    timeout=30
)
"""
    
    # Add the rest of the configuration
    ai_enabled = choice != '5'
    
    config_template += f"""
# AI Processing Configuration
AI_PROCESSING_CONFIG = AIProcessingConfig(
    enabled={ai_enabled},
    model_config=AI_MODEL_CONFIG,
    system_prompt=(
        "You are a helpful assistant that processes product data "
        "for recommendations."
    ),
    user_prompt_template="Process this product data: {{data}}",
    output_format="json",
    batch_size=10,
    retry_attempts=3,
    retry_delay=1.0
)

# Main Configuration
DEFAULT_CONFIG = RecommendationConfig(
    ai_processing=AI_PROCESSING_CONFIG,
    content_similarity_weight=0.6,
    ai_enhancement_weight=0.4,
    use_ai_for_user_profiling={ai_enabled},
    use_ai_for_content_analysis={ai_enabled},
    cache_ai_responses={ai_enabled},
    cache_ttl_seconds=3600
)
"""
    
    # Write the configuration file
    with open("config.py", "w") as f:
        f.write(config_template)
    
    print(f"\n‚úÖ Configuration saved to config.py")
    
    if choice in ['1', '2', '4'] and 'api_key' in locals() and api_key:
        print("\nüîí Security Note:")
        print("Your API key has been saved in config.py")
        print("Consider using environment variables for production:")
        print("  export OPENAI_API_KEY='your-key-here'")
        print("  Then modify config.py to use os.getenv('OPENAI_API_KEY')")
    
    if choice == '3':
        print("\nüêã Ollama Setup:")
        print("Make sure Ollama is running with:")
        print("  ollama serve")
        print(f"  ollama pull {model if 'model' in locals() else 'llama2'}")
    
    print("\nüöÄ Next steps:")
    print("1. Install dependencies: uv sync")
    print("2. Add your product data to data/generic_dataset.csv")
    print("3. Start the server: uvicorn app.main:app --reload")
    print("4. Test the API: curl http://localhost:8000/health")


if __name__ == "__main__":
    main()
